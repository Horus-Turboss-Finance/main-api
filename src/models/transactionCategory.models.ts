import { handleDBError } from "../utils/handleCoreResponse";
import { DBConnection } from "../config/db";
import { Table } from "ts-sql-query/Table";

const tTransactionCategory = new (class extends Table<DBConnection, "tTransactionCategory"> {
  id = this.autogeneratedPrimaryKey("id", "int");
  userId = this.column("user_id", "int");
  name = this.column("name", "string");
  icon = this.column("icon", "string");
  type = this.column("type", "int");
  baseCat = this.optionalColumn('base_category', 'string');
  constructor() {
    super("transaction_category");
  }
})();

const selectColumns = {
  id: tTransactionCategory.id,
  name: tTransactionCategory.name,
  icon: tTransactionCategory.icon,
  type: tTransactionCategory.type,
  base_category: tTransactionCategory.baseCat
};

export class TransactionCategory {
  static async findAllByUserId({ userId }: { userId: number }) {
    return new DBConnection()
      .selectFrom(tTransactionCategory)
      .where(tTransactionCategory.userId.equals(userId))
      .select(selectColumns)
      .executeSelectMany()
      .catch(handleDBError("findAllByUserId", "category"));
  }

  static async findById({ id, userId }: { id: number; userId: number }) {
    return new DBConnection()
      .selectFrom(tTransactionCategory)
      .where(tTransactionCategory.id.equals(id).and(tTransactionCategory.userId.equals(userId)))
      .select(selectColumns)
      .executeSelectOne()
      .catch(handleDBError("findById", 'category'));
  }

  static async insert({ userId, name, icon, base_category, type }: { userId: number; name: string; icon: string, base_category: string, type: 1|2 }) {
    return new DBConnection()
      .insertInto(tTransactionCategory)
      .set({ userId, name, icon, baseCat: base_category, type })
      .executeInsert()
      .catch(handleDBError("insert", 'category'));
  }

  static async updateById({ id, userId, name, icon }: { id: number; userId: number; name?: string; icon?: string }) {
    const dataToUpdate: Partial<{ name: string; icon: string }> = {
      ...(name && { name }),
      ...(icon && { icon }),
    };

    await new DBConnection()
      .update(tTransactionCategory)
      .set(dataToUpdate)
      .where(tTransactionCategory.id.equals(id).and(tTransactionCategory.userId.equals(userId)))
      .executeUpdate()
      .catch(handleDBError("updateById", "category"));

    return this.findById({ id, userId });
  }

  static async deleteById({ id, userId }: { id: number; userId: number }) {
    await new DBConnection()
      .deleteFrom(tTransactionCategory)
      .where(tTransactionCategory.id.equals(id).and(tTransactionCategory.userId.equals(userId)))
      .executeDelete()
      .catch(handleDBError("deleteById", 'category'));

    return true;
  }
}